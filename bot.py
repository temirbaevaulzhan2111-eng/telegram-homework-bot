
import os
import telebot
from flask import Flask, request
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


TOKEN = os.environ.get("TELEGRAM_TOKEN")
MY_ID = int(os.environ.get("MY_ID"))
RENDER_URL = os.environ.get("RENDER_URL")


bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)


@bot.message_handler(commands=['start'])
def start(message):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start.")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–≤–æ—ë –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ üìö")

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ.")
    caption = message.caption if message.caption else "(–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)"
    file_id = message.photo[-1].file_id
    
    
    bot.send_photo(MY_ID, file_id, caption=f"–û—Ç {message.from_user.first_name}:\n{caption}")
    bot.send_message(message.chat.id, "‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é!")


@bot.message_handler(content_types=['text'])
def handle_text(message):
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
   
    bot.send_message(MY_ID, f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.first_name}: {message.text}")
    bot.send_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é!")

@app.route('/' + TOKEN, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_str = request.data.decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
        return '', 200
    return "OK", 200


@app.route('/')
def index():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if RENDER_URL:
    try:
       
        bot.remove_webhook()
      
        bot.set_webhook(url=RENDER_URL + '/' + TOKEN)
        logger.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
else:
    logger.info("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è RENDER_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–µ–±—Ö—É–∫ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))



